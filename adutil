#!/bin/bash

#check if the user is running as root
#root is required to perform kerberos authentication and domain joining
if [ $LOGNAME != "root" ] ; then
	echo "This script must be run as root user!";
	echo "try 'sudo adutil' instead";
	exit;
fi

clear
echo "Nom's Ubuntu > Active Directory Script v1.01"
sleep 1.5
clear
echo "INFORMATION! - This method of joining Linux Machines has only been successful on the following versions of Linux:"
echo "Ubuntu Server 14.04.1"
echo "Ubuntu Desktop 14.04.1"
echo "Linux Mint 17.3"
echo
echo "Attempting this on other versions of linux may not work and/or yeild unexpected results"
echo "Proceed at your own discretion"

sleep 10

clear

echo "In order for this process to be successful, ensure that this computer is connected to both the internet and the network hosting the domain to be joined"
sleep 5
clear

echo "Updating apt..."

#************UPDATING APT AND INSTALLING REQUIRED PACKAGES************

#Update Apt
apt-get update -y -qq
echo "done..."
sleep 1

#install necessary packages
clear
echo "Installing necessary packages for Joining this machine to Windows Domain"
apt-get install realmd sssd samba-common samba-common-bin samba-libs sssd-tools krb5-user adcli packagekit vim -y -qq
echo 
echo "Necessary packages installed"
sleep 1

#************ACQUIRING A KERBEROS TICKET************

clear
echo "Acquiring a Kerberos ticket with domain user \"Administrator\"..."
kinit -V Administrator
echo
echo "Presenting ticket to user:"
echo
klist

sleep 2
echo

function undo {
	clear
	read -p "Undo changes and uninstall packages? y/n: " uninstall
		
		if [ $uninstall == "y" ] ; then	
			echo
			apt-get remove realmd sssd samba-common samba-common-libs samba-libs sssd-tools krb5-user adcli packagekit vim -y
			sleep 1
			clear
			echo "Packages removed"
			sleep 1
			clear
		elif [ $uninstall == "n" ] ; then
			clear
			echo "Stopping..."
			sleep 1
			exit
		elif [ -z $uninstall ] ; then
			undo
		else
			echo "Unknown paramter \"$retry\" - must be y/n";
			sleep 1
			undo
		fi
}

function confirmTicket {

	read -p "Has a ticket been recieved? y/n: " ticket

		if [ $ticket == "y" ] ; then
			clear
			echo "Proceeding to join Windows Domain"
		elif [ $ticket == "n" ] ; then
			clear
			echo "An error has occured."
			echo "Can the Domain Controller be contacted?"
			sleep 1
			echo
		elif [ -z $ticket ] ; then
			confirmTicket
		else
			echo "Unknown paramter \"$ticket\" - must be y/n";
			sleep 1
			confirmTicket
		fi
}

confirmTicket

clear

#************JOINING THE DOMAIN************

function cont {
	read -p "Continue? y/n: " con
	
	if [ $con == "y" ] ; then
		echo "Continuing in 3 seconds..."
		sleep 3
		clear
	elif [ $con == "n" ] ; then
		echo "Stopping..."
		sleep 3
		clear
	elif [ -z $con ] ; then
		cont
	else
		echo "Unexpected token: $con"
		cont
	fi
}

function joinAndValidate {
	echo
	read -p "Domain Admin account for joining domain (case sensitive): " domainAdmin
	read -p "Domain Name (all lowercase): " domainName

	realm --verbose join -U $domainAdmin $domainName
	
	clear
	domain=$(realm -n list)
	if [ $domain != $domainName ] ; then
		echo "An unknown error has occured while attempting to join the domain.  See error logs for more details."
		echo "If this error is incorrect, and this computer has joined the domain, enter y, and this process will continue"
		cont
	fi
}

clear
echo "Attempting to join Windows Domain with domain user \"Administrator\""
sleep 1

joinAndValidate

#************MODIFY CONFIG FILES FOR AUTO-HOMEDIR FOR DOMAIN USERS************
#************AS WELL AS sssd FOR DNS ENTRY FOR THIS MACHINE************

clear
function modsssdConf {
	echo "ad_hostname = $(hostname).$(realm -n list)" >> /etc/sssd/sssd.conf
	echo "dyndns_update = true"
}

clear
echo "Modyfing /etc/apt/apt.conf, including Domain DNS settings"
modsssdConf
sleep 1.5
echo "done...."

#restart sssd
clear
echo "restarting sssd"
sleep 0.5
service sssd restart
sleep 0.5
echo "done..."

clear

#modify /etc/pam.d/common-session to auto-create a home directory for domain users at logon
function modCommonSession {
	echo 'session_required pam_mkhomedir.so skel=/etc/skel umask=0022' >> /etc/pam.d/common-session
}

modCommonSession

echo "done..."
sleep 1.5

clear
sleep 1
clear
echo "Configuration complete"
echo "Domain users are now able to login to this machine"
echo "Finishing..."

exit


